#+TITLE: Prolog-Library-Collection (PLC)
#+AUTHOR: Wouter Beek

A collection of Prolog libraries that extends the functionality
available in the [[http://www.swi-prolog.org][SWI-Prolog]] standard libraries.  It contains the
following modules:

  - ~archive_ext~
  - ~atom_ext~: support for working with atoms, e.g., capitalization,
    ellipsis, strip, truncate.
  - ~call_ext~: meta-predicates
  - ~code_ext~
  - ~conf_ext~
  - ~csv_ext~: streamed processing of CSV files
  - ~date_time~
  - ~dcg/~: DCG support
  - ~default~
  - ~dict_ext~: SWI7 dictionaries
  - ~dlist~: difference lists
  - ~file_ext~: handling files and directories
  - ~geo/~: parsing & generating of Well-Known Text (WKT) strings
  - ~has_ext~
  - ~http/~: HTTP client & server support
  - ~json_ext~
  - ~list_ext~
  - ~math_ext~
  - ~nlp/~
  - ~os_ext~: running external processes, streaming to/from external
    processes
  - ~pair_ext~
  - ~pp~
  - ~sort_ext~
  - ~stream_ext~: support for recoding, unpacking, sorting, and hasing
    streams.
  - ~string_ext~
  - ~uri/~: constructing/decomposing URIs
  - ~write_ext~
  - ~xml/~: streamed processing of XML DOMs

* Installation

  1. Install a recent version of [[http://www.swi-prolog.org][SWI-Prolog]].
  2. Start Prolog and install the [[https://github.com/wouterbeek/ppm][Prolog Package Manager]] (PPM):
     ~pack_install('git://github.com/wouterbeek/ppm').~
  3. Activate PPM: ~[library(ppm)].~
  4. Install Prolog Library Collection through the PPM:
     ~ppm_install('Prolog-Library-Collection').~

* Usage

In order to access the libraries in the Prolog Library Collection from
the Prolog ~library~ path, you must first load PPM and the libraries
you want to use afterwards:

#+BEGIN_SRC prolog
?- [library(ppm)].
?- [library(atom_ext)].
#+END_SRC

Since the above is a bit cumbersome, it is common practice to place
the PPM load command in the Prolog startup file (~~/.swiplrc~).

* Library overview
** ~/dcg~ Definite Clause Grammars

In directory ~/dcg~ you will find a collection of Definite Clause
Grammar (DCG) modules.


** ~/dcg/dcg_abnf.pl~ Advanced Bauckus-Naur Form (ABNF)

While DCGs are nice, they can be a bit verbose for expressing common
repetition patterns.  To make DCGs that include repetitions less
verbose, this module implements *variable repetition* as defined in
[[https://tools.ietf.org/html/rfc5234][RFC 5234: Augmented BNF for Syntax Specifications: ABNF]].

*** A simple example

Suppose we want to parse sentences, which are non-empty sequences of
words:

#+BEGIN_SRC prolog
sentence1([H|T]) -->
  word(H),
  sentece2(T).

sentence2([H|T]) -->
  word(H),
  sentence2(T)
sentence2([]) --> "".
#+END_SRC

When this module is loaded, the same can be written as follows:

#+BEGIN_SRC prolog
sentence(L) -->
  +(word, L).
#+END_SRC

*** definition

**** variable repetition

Variable repetition is a metasyntactic construct which states that
at least ~M~ and at most ~N~ occurrences of ~:Dcg_0~ must be
processed:

#+BEGIN_SRC prolog
'm*n'(?M:nonneg, ?N:nonneg, :Dcg_0)//
#+END_SRC

**** specific repetition

Specific repetition is a metasyntactic construct which states that
exactly ~N~ occurrences of ~Dcg_0~ must be processed:

#+BEGIN_SRC prolog
'#'(?N:nonneg, :Dcg_0)//
#+END_SRC

Specific repetition is a special case of [[variable repetition]], because
~#(N, Dcg_0)~ is the same as ~'m*n'(N, N, Dcg_0)~.

**** Kleene star

Kleene star is a metasyntactic construct which states that zero or
more occurrences of ~Dcg_0~ must be processed:

#+BEGIN_SRC prolog
*(?N:nonneg, :Dcg_0)//
#+END_SRC

Kleene star is a special case of [[variable repetition]], because ~*(N,
Dcg_0)~ is the same as ~'m*n'(_, _, Dcg_0)~.

**** Kleene sum

Kleene sum is a metasyntactic construct which states that one or more
occurrences of ~Dcg_0~ must be processed:

#+BEGIN_SRC prolog
+(?N:nonneg, :Dcg_0)//
#+END_SRC

Kleene sum is a special case of [[variable repetition]], because ~+(N,
Dcg_0)~ is the same as ~'m*n'(1, _, Dcg_0)~.

**** optional sequence

Optional sequence is a metasyntactic construct which states that
~Dcg_0~ should either be processed once or not at all:

#+BEGIN_SRC prolog
?(:Dcg_0)//
#+END_SRC

Optional sequence is a special case of [[variable repetition]], because
~?(Dcg_0)~ is the same as ~'m*n'(0, 1, Dcg_0)~.

| *DCG*                     | *Meaning*                                           | *Name*              |
|---------------------------+-----------------------------------------------------+---------------------|
| ~#(?N, :Dcg_0)//~         | Process ~Dcg_0~ exactly ~N~ times.                  | [[specific repetition]] |
| ~*(:Dcg_0)//~             | Process ~Dcg_0~ 0 or more times.                    | [[Kleene star]]         |
| ~'*n'(?N, :Dcg_0)//~      | Process ~Dcg_0~ at most ~N~ times.                  |                     |
| ~+(:Dcg_0)//~             | Process ~Dcg_0~ 1 or more times.                    | [[Kleene sum]]          |
| ~?(:Dcg_0)//~             | Process ~Dcg_0~ 0 or 1 times.                       | [[optional sequence]]   |
| ~'m*'(?M, :Dcg_0)//~      | Process ~Dcg_0~ at least ~M~ times.                 |                     |
| ~'m*n'(?M, ?N, :Dcg_0)//~ | Process ~Dcg_0~ at least ~M~ and at most ~N~ times. | [[variable repetition]] |
